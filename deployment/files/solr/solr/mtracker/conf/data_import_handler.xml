<dataConfig>
    <script><![CDATA[

        function LabelsToColumns(row) {
            var labelPref = 'label_';
            var labelVal = java.lang.Integer(0);
            // Extract labels from the query results.
            var labels = row.get('labels');
            if (labels != null) {
                // Convert those labels to the string of binary digits.
                // Iteration over a string of bits has been chosen instead of 
                // iteration over subsequent powers of two because it is more
                // portable without hardcoded limits.
                var bits = java.lang.Integer.toString(java.lang.Integer.parseInt(labels), 2); 
                bits = java.lang.StringBuffer(bits).reverse().toString();
                // Itarete over bits and add dynamic column when a particular bit is set.
                for (var i = 0; i < bits.length(); i++) {
                    if ("1".equals(java.lang.Character.toString(bits.charAt(i)))) {
                        labelVal = java.lang.Integer(java.lang.Math.pow(2, i));
                        row.put(labelPref + labelVal, labelVal);
                    }
                }
            } else {
                row.put(labelPref + labelVal, labelVal);
            }
            row.remove('labels');
            return row;
        
    ]]></script>
    <dataSource name="mturk_crawl"
                driver="org.postgresql.Driver"
                url="jdbc:postgresql://localhost/%(db_name)s"
                user="%(solr_db_user)s"
                password="%(solr_db_password)s"
                readOnly="true"
                autoCommit="false"
                maxRows="1000"
                batchSize="100"
                transactionIsolation="TRANSACTION_READ_COMMITTED"
                holdability="CLOSE_CURSORS_AT_COMMIT"/>
    <document>
        <entity name="hitgroupcontent" dataSource="mturk_crawl" threads="2"
                transformer="HTMLStripTransformer,script:LabelsToColumns"
                query="
                    SELECT 
                        hgcnt.id AS django_id, 
                        hgcnt.group_id,
                        hgcnt.requester_id, 
                        hgcnt.requester_name,
                        hgcnt.reward,
                        hgcnt.html, 
                        hgcnt.description, 
                        hgcnt.title, 
                        hgcnt.keywords, 
                        hgcnt.qualifications, 
                        hgcnt.occurrence_date, 
                        hgcnt.time_alloted,
                        hgcls.classes AS labels
                    FROM
                        main_hitgroupcontent AS hgcnt
                    LEFT JOIN
                        main_requesterprofile AS rp
                        ON hgcnt.requester_id = rp.requester_id
                    LEFT JOIN
                        main_hitgroupclass AS hgcls
                        ON hgcnt.group_id = hgcls.group_id
                    WHERE
                        COALESCE(rp.is_public, true) = true AND
                        hgcnt.is_public = true AND
                        LENGTH(html) &lt; 9000001"

				deltaQuery="SELECT DISTINCT
                    hitgroupcontent_id as id
                FROM
                    main_indexqueue
				WHERE
                    created > '${dataimporter.last_index_time}'"

                deltaImportQuery="
                    SELECT 
                        hgcnt.id AS django_id, 
                        hgcnt.group_id,
                        hgcnt.requester_id, 
                        hgcnt.requester_name,
                        hgcnt.reward,
                        hgcnt.html AS content, 
                        hgcnt.description, 
                        hgcnt.title, 
                        hgcnt.keywords, 
                        hgcnt.qualifications, 
                        hgcnt.occurrence_date, 
                        hgcnt.time_alloted,
                        hgcls.classes AS labels
                    FROM
                        main_hitgroupcontent AS hgcnt
                    LEFT JOIN
                        main_requesterprofile AS rp
                        ON hgcnt.requester_id = rp.requester_id
                    LEFT JOIN
                        main_hitgroupclass AS hgcls
                        ON hgcnt.group_id = hgcls.group_id
                    WHERE
                        COALESCE(rp.is_public, true) = true AND
                        hgcnt.is_public = true AND 
                        hgcnt.id = ${dataimporter.delta.id}">

            <!-- There is no need to explicitly store information about fields. -->
		</entity>

    </document>
</dataConfig>
